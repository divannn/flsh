/*This class controls the hero ship*/package{	import flash.display.*	import flash.events.*	import flash.ui.*	import flash.filters.*	import flash.utils.Timer;    import flash.events.TimerEvent;	public class Ship extends MovieClip	{		//the ship has this static property so it can be referenced from any class easily 		static public var main;				//the ship's fly speed		public var v:Number;		//buffers to keep ship from flying too far off screen		public var xBuffer:int;		public var yBuffer:int;		public var xTarget:int;		public var yTarget:int;				//This will create a buffer between shooting missiles.  	    var shootLimiter:int;		//defines how long the ship will shake when it gets hit		public var shakeTimer:Timer;				//defines the current health of the ship		public var health:Number;		//defines the max health of the ship		public var maxHealth:Number;		//defines how violently the ship will shake		public var shakeStrength:int;				//holds an array of bitmap filters that can be applied to the ship		public var myFilters:Array;		//defines whether or not the ship currently has a shield		public var shield:Shield;				//the ship is created in the Game's initGame() function 		public function Ship(x_, y_)		{				//set the "main" property to equal this ship instance so any class can use "Ship.main" to refer to this ship 			main = this;			//ship starts with no shield			shield = null;				//ship has 100 health max			maxHealth = 100;			//ship starts at max health			health = maxHealth;			//reset the health meter for the ship			Game.main.healthMeter.bar.scaleX = 1;			//hide the enemy health meter, until a miniboss is encountered			Game.main.enemyHealthMeter.bar.scaleX = 1;			Game.main.enemyHealthMeter.visible = false;			//decide on edge buffers so the ship cant leave screen			xBuffer = 50;			yBuffer = 25;			//position the ship based on x and y values passed in (middle of screen)			x = xTarget = x_;			y = yTarget = y_;			//decide on a speed for ship movement			v = 6;						// Reset the shot limiter			shootLimiter = 0;						//add an ENTER_FRAME event so we can do some logic at frame rate			FrameTimer.add(this);			//this just optimizes performance			cacheAsBitmap = true;			//let's add a dropshadow filter to the ship for fun			var filter:BitmapFilter = new DropShadowFilter(5,45,0x000000,50,5,5);            myFilters = new Array();            myFilters.push(filter);           	filters = myFilters;		}				//this method resets the ship 	 	public function reset()		{			//reset the health to max health (100)			health = maxHealth;			//reset the health meter			Game.main.healthMeter.bar.scaleX = 1;			//reset and disable the enemy health meter			Game.main.enemyHealthMeter.bar.scaleX = 1;			Game.main.enemyHealthMeter.visible = false;		}				//do this at frame rate		public function enterFrame(e:Event)		{			move();						if(shootLimiter == 0){				//fire a bullet from this ship's nose				var b = new Bullet(x+15, y+3);				//add the bullet to stage				Game.main.spriteClip.addChild(b);				//update the shots fired stat				Game.main.updateStat("shots",1);			}						shootLimiter++;			if(shootLimiter == 5){			  shootLimiter = 0;			}		}				//at frame move the ship toward the x and y target		public function move()		{			// if we need to move the ship LEFT pressed and the ship isn't too far left			if(x > xTarget  && x > xBuffer)			{				//update its position, move it left				x -= v;			}			// if we need to move the ship RIGHT and the ship isn't too far right			else if(x < xTarget && x < Game.WIDTH-xBuffer)			{ 				//update its position, move it right				x += v;			}						// if we need to move the ship UP and the ship isn't too far up			if(y > yTarget && y > yBuffer)			{				//update its position, move it up				y -= v;			}			// if we need to move the ship DOWN and the ship isn't too far down			else if(y < yTarget && y < Game.HEIGHT-yBuffer)			{				//update its position, move it down				y += v;			}						if(Math.abs(xTarget - x) <= v){			    xTarget = x;			}						if(Math.abs(yTarget - y) <= v){			    yTarget = y;			}		}				//when the ship is killed		public function kill()		{			//create an explosion			var e = new Explosion(x, y);			//add th explosion to stage			Game.main.spriteClip.addChild(e);						//remove the ENTER_FRAME event			FrameTimer.remove(this);						//kill the shake timer			shakeTimer.stop();			shakeTimer.removeEventListener("timer", shake);			shakeTimer.removeEventListener(TimerEvent.TIMER_COMPLETE, onShakeComplete);						//fire the game over logic in the game class			Game.main.gameOver();						//remove this ship from the stage			Game.main.spriteClip.removeChild(this);			Game.main.ship = null;								}				//when the ship takes damage		public function takeDamage(d_)		{			//play a damage sound			var s = new SoundTakeDamage();			s.play();						//in normal mode just subtract the damage			if(Game.main.difficultyMode == Game.NORMAL)				health -= d_;			//in hard mode, double the damage taken for everything			if(Game.main.difficultyMode == Game.HARD)				health -= 2 * d_;						//if the ship's health reaches zero			if(health <= 0 )			{				//make sure healt is not less than zero				health = 0;				//kill it				kill();				//make sure the meter is set to zero				Game.main.healthMeter.bar.scaleX = 0;			}			else			{				//if the ship takes damage but is not destroyed, create an explosion				var e = new SmallExplosion(x, y);				//add that explosion to the stage				Game.main.spriteClip.addChild(e);								//if the ship is not currently shaking, begin a shake cycle				if(rotation == 0)					initShake();				//update the ship's health meter				Game.main.healthMeter.bar.scaleX = (health/maxHealth);			}		}				//shaking ship logic		public function initShake()		{			//set shake strength			shakeStrength = 5;			//create a timer for the shake			shakeTimer = new Timer(50, 10);			shakeTimer.addEventListener("timer", shake);			shakeTimer.addEventListener(TimerEvent.TIMER_COMPLETE, onShakeComplete);			shakeTimer.start();		}				//this will get fired every 50 millisecs for ten cycles by the shakeTimer		public function shake(e:TimerEvent)		{			//rotate the ship by the shakeStrength value			rotation += shakeStrength;			//then reverse the direction of the shake whe it reaches a threshold			if(Math.abs(rotation) >= 5)			{				shakeStrength *= -1;			}		}				//after ten ticks of the shakeTimer, kill the timer, and reset the ship's rotation to 0		public function onShakeComplete(e:TimerEvent)		{			rotation = 0;			shakeTimer.removeEventListener("timer", shake);			shakeTimer.removeEventListener(TimerEvent.TIMER_COMPLETE, onShakeComplete);		}			}}