/*The Boss class controls the final boss battle*/package{	import flash.display.*	import flash.events.*	import flash.ui.*	import flash.utils.Timer;    import flash.events.TimerEvent;	import flash.filters.*	public class Boss extends MovieClip	{				//x and y velocity of the boss		public var xv:Number;		public var yv:Number;				//this timer controls a shooting interval		public var shootTimer:Timer;		//this timer controls the boss's second gun's shooting interval		public var lowerShootTimer:Timer;		//the current health of the boss		public var health:Number;		//the maximum health of the boss		public var maxHealth:Number;				public function Boss()		{			//when the boss is created, kill the timer that releases mini bosses			LevelManager.main.miniBossTimer.stop();			//in normal difficulty mode, kill all other incoming enemy ships (in Hard mode keep them coming)			if(Game.main.difficultyMode == Game.NORMAL)				LevelManager.main.shipTimer.stop();							//activate the enemy health meter			Game.main.enemyHealthMeter.visible = true;			//set the meter to full health			Game.main.enemyHealthMeter.bar.scaleX = 1;			//add the boss to the list of enemy ships on stage			EnemyShip.list.push(this);						//give the boss a strong health			maxHealth = 50;			//set its current health to this max health			health = maxHealth;						//set its x position off the right edge of the stage			x = Game.WIDTH + 150;			//set it's y position in mid range			y = 150;						//set its intial x and y velocity			xv = 2;			yv = 2;				FrameTimer.add(this);			cacheAsBitmap = true;						//add a drop shadow to the graphic for fun			var filter:BitmapFilter = new DropShadowFilter(5,45,0x000000,50,5,5);            var myFilters:Array = new Array();            myFilters.push(filter);            filters = myFilters;						//start the boss shooting			initShootingInterval();					}				public function initShootingInterval()		{			//boss ship will shoot every 2 seconds			var interval:int = 2000;			//create a timer instance to control it			shootTimer = new Timer(interval, 0);			shootTimer.addEventListener("timer", shoot);			shootTimer.start();						//the second gun will shoot every 1.5 seconds			interval = 1500;			//create another timer for it			lowerShootTimer = new Timer(interval, 0);			lowerShootTimer.addEventListener("timer", shootLower);			lowerShootTimer.start();			}				//at frame rate do this		public function enterFrame(e:Event)		{			//if the boss is still coming in from the right have it keep moving left			//if it reaches an x position of 500 or less, it'll stp moving left, you must kill it.			if(x>500)			{				x -= xv;			}						//if it is moving downward and reaches a low point			if(yv > 0 && y > 200)			{				//reverse its y velocity so it starts going up				yv*=-1;			}			//if its moving upward and it approaches the top of the stage, reverse it so it stats going down			else if(yv < 0 && y < 100)			{				yv*=-1;			}			//update it y position			y += yv;			//if it reaches the left edge of stage, which it never will (because you have to kill it) kill it.			if(x < -50)			{				kill();				return;			}						//if the hero ship has not been destroyed yet			if(Game.main.ship != null)			{				//do a collision test between the boss and the hero ship				if(this.hitRect.hitTestObject(Game.main.ship.hitRect))				{					//if the hero ship currently has no shield					if(Ship.main.shield == null)					{						//remove it's ENTER_FRAME event and kill it						FrameTimer.remove(this);						Game.main.ship.kill();					}				}			}		}				//The shoot timer calls this method every 2 seconds		public function shoot(e:TimerEvent)		{		    if(!FrameTimer.paused())		    {			    //create three bullets for every shot    			//pass in a position so they look like they are coming from the turret in the art, make one shoot straight    			var b = new MiniBossBullet(x-115, y-35, 0);    			Game.main.spriteClip.addChild(b);    			//make one shoot upward    			b = new MiniBossBullet(x-115, y-35, -1);    			Game.main.spriteClip.addChild(b);    			//make one shoot downward    			b = new MiniBossBullet(x-115, y-35, 1);    			//add each to the stage to display it    			Game.main.spriteClip.addChild(b);			}		}				//The lower gun will shoot every 1.5 seconds		public function shootLower(e:TimerEvent)		{		    if(!FrameTimer.paused())		    {			    //create two bullets coming out of the lower turret    			//one will fire upward    			var b = new MiniBossBullet(x-120, y + 40, -1);    			Game.main.spriteClip.addChild(b);    			//the other will fire straight    			b = new MiniBossBullet(x-120, y + 40, 0);    			//add each to stage to display it    			Game.main.spriteClip.addChild(b);			}		}				//this metho will destroy the boss ship		public function kill()		{			//stop the shoot timers, remove them			shootTimer.stop();			shootTimer.removeEventListener("timer", shoot);			lowerShootTimer.removeEventListener("timer", shootLower);			//create three explosions all around the boss ship			var e = new Explosion(x, y-5);			Game.main.spriteClip.addChild(e);			e = new Explosion(x-20, y+5);			Game.main.spriteClip.addChild(e);			e = new Explosion(x+15, y-5);			Game.main.spriteClip.addChild(e);						//remove the ENTER_FRAME event			FrameTimer.remove(this);			//rmeove the boss sprite			Game.main.spriteClip.removeChild(this);			//find the boss in the enemy ship list an remove it from that list			for(var i:int = 0; i < EnemyShip.list.length; i++)			{				if(EnemyShip.list[i] == this)					EnemyShip.list.splice(i,1);			}		}				//this method is called when the boss gets shot by the hero ship		public function takeDamage(d_)		{			//subtract the amount of health passed in			health -= d_;			//update the hits game stat			Game.main.updateStat("hits",1);			//if the boss's health reaches zero			if(health <= 0 )			{				//update kills stat, give the player 5000 points, hide the boss health meter and display points earned				Game.main.updateStat("kills",1);				Game.main.updateStat("points",5000);				Game.main.enemyHealthMeter.visible = false;				var d = new PointDisplay(x,y,5000,2);				Game.main.spriteClip.addChild(d);								health = 0;				//kill the boss				kill();				//go to a win game state				LevelManager.main.win();								//stop the timers from creating more enemies and powerups				LevelManager.main.shipTimer.stop();				LevelManager.main.powerupTimer.stop();								//add 5 falling aliens from the boss ship!				var a = new Alien(x, y);				Game.main.spriteClip.addChild(a);				a = new Alien(x-15, y-2);				Game.main.spriteClip.addChild(a);				a = new Alien(x+12, y+5);				Game.main.spriteClip.addChild(a);				a = new Alien(x+24, y+15);				Game.main.spriteClip.addChild(a);				a = new Alien(x-30, y-15);				Game.main.spriteClip.addChild(a);							}			// the boss takes damage but still has health			else			{				//give the player 50 points				Game.main.updateStat("points",50);				//update the boss health meter				Game.main.enemyHealthMeter.bar.scaleX = (health/maxHealth);								//make some random offest for an explosion				var xOffset = Math.floor(Math.random()*50) - 25;				var yOffset = Math.floor(Math.random()*50) - 25;								//create an explosion somewhere on the boss				var e = new Explosion(x + xOffset, y + yOffset);				//add the explosion to stage				Game.main.spriteClip.addChild(e);							}		}			}	}