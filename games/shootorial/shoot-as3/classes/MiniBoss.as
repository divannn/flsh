/*The MiniBoss class controls mini bosses*/package{	import flash.display.*	import flash.events.*	import flash.ui.*	import flash.utils.Timer;    import flash.events.TimerEvent;	import flash.filters.*	public class MiniBoss extends MovieClip	{			//there will only be one miniboss at a time on stage so we can use a static property to refer to it from other classes		//like this, MiniBoss.main			static public var main				public var xv:Number;		public var yv:Number;		public var shootTimer:Timer;		public var shakeTimer:Timer;				public var health:Number;		public var maxHealth:Number;				public var shakeStrength:int;				public function MiniBoss()		{			main = this;			LevelManager.main.miniBossTimer.stop();			//to stop ships from entering during miniboss battle			if(Game.main.difficultyMode == Game.NORMAL)				LevelManager.main.shipTimer.stop();						Game.main.enemyHealthMeter.visible = true;			Game.main.enemyHealthMeter.bar.scaleX = 1;						EnemyShip.list.push(this);						maxHealth = 10;			health = maxHealth;						x = Game.WIDTH + 50;			y = Math.floor(Math.random()*(Game.HEIGHT-100)+50);						xv = 2;			yv = Math.floor(Math.random()*2)+3;						addEventListener(Event.ENTER_FRAME, enterFrame);			cacheAsBitmap = true;						var filter:BitmapFilter = new DropShadowFilter(5,45,0x000000,50,5,5);            var myFilters:Array = new Array();            myFilters.push(filter);            filters = myFilters;						initShootingInterval();					}				public function initShootingInterval()		{			// enemy ship will shoot at an interval that could be 1 to 5 seconds...			var interval:int = Math.floor(Math.random()*2) + 3;						shootTimer = new Timer(interval*1000, 0);			shootTimer.addEventListener("timer", shoot);			shootTimer.start();								}				public function enterFrame(e:Event)		{			if(x>500)			{				x -= xv;			}				if(yv > 0 && y > 200)			{				yv*=-1;			}			else if(yv < 0 && y < 100)			{				yv*=-1;			}			y += yv;						if(x < -50)			{				kill();				return;			}						if(Game.main.ship != null)			{				if(this.hitRect.hitTestObject(Game.main.ship.hitRect))				{					takeDamage(20);					if(Ship.main.shield == null)					{						Game.main.ship.takeDamage(30);					}				}			}		}				public function shoot(e:TimerEvent)		{			var s = new SoundBigShot();			s.play();						var b = new MiniBossBullet(x-65, y-5, 0);			Game.main.spriteClip.addChild(b);			b = new MiniBossBullet(x-65, y-5, -1);			Game.main.spriteClip.addChild(b);			b = new MiniBossBullet(x-65, y-5, 1);			Game.main.spriteClip.addChild(b);		}				public function kill()		{			var s = new SoundBigHit();			s.play();						shootTimer.stop();			shootTimer.removeEventListener("timer", shoot);			var e = new Explosion(x, y-5);			Game.main.spriteClip.addChild(e);			e = new Explosion(x-20, y+5);			Game.main.spriteClip.addChild(e);			e = new Explosion(x+15, y-5);			Game.main.spriteClip.addChild(e);						removeEventListener(Event.ENTER_FRAME, enterFrame);			Game.main.spriteClip.removeChild(this);			for(var i:int = 0; i < EnemyShip.list.length; i++)			{				if(EnemyShip.list[i] == this)					EnemyShip.list.splice(i,1);			}						Game.main.enemyHealthMeter.visible = false;						//LevelManager.main.shipTimer.start();		}				public function takeDamage(d_)		{			health -= d_;			Game.main.updateStat("hits",1);			if(health <= 0 )			{				Game.main.updateStat("kills",1);				Game.main.updateStat("points",500);				Game.main.enemyHealthMeter.visible = false;								health = 0;								var d = new PointDisplay(x,y,500,2);				Game.main.spriteClip.addChild(d);				kill();								LevelManager.main.miniBossTimer.start();								if(Game.main.difficultyMode == Game.NORMAL)					LevelManager.main.shipTimer.start();								var a = new Alien(x, y);				Game.main.spriteClip.addChild(a);				a = new Alien(x-15, y-2);				Game.main.spriteClip.addChild(a);				a = new Alien(x+12, y+5);				Game.main.spriteClip.addChild(a);							}			else			{				var e = new SmallExplosion(x, y);				Game.main.spriteClip.addChild(e);								if(rotation == 0)					initShake();				Game.main.updateStat("points",25);				Game.main.enemyHealthMeter.bar.scaleX = (health/maxHealth);							}		}				public function initShake()		{			shakeStrength = 5;						shakeTimer = new Timer(50, 10);			shakeTimer.addEventListener("timer", shake);			shakeTimer.addEventListener(TimerEvent.TIMER_COMPLETE, onShakeComplete);			shakeTimer.start();		}				public function shake(e:TimerEvent)		{			rotation += shakeStrength;			if(Math.abs(rotation) >= 5)			{				shakeStrength *= -1;			}		}				public function onShakeComplete(e:TimerEvent)		{			rotation = 0;			shakeTimer.removeEventListener("timer", shake);			shakeTimer.removeEventListener(TimerEvent.TIMER_COMPLETE, onShakeComplete);		}					}	}