/*This class controls ll the logic that drives the global game relate functionality*/package{ 	import flash.display.*	import flash.text.*	import flash.events.*	import flash.net.URLRequest;		public class Game extends MovieClip	{		//this static main property can be used to refer to this game object from anywhere easily using Game.main 		static public var main;		//these values just store the width and height of the game		static public var WIDTH:int = 650;		static public var HEIGHT:int = 300;				//this property will just reference the hero ship		public var ship:Sprite;				//These are stats we can will track in our game		public var gameComplete:int;		public var kills:int;		public var misses:int;		public var hits:int;		public var points:int;		public var shots:int;		public var aliensCaptured:int;		public var aliensCapturedInAir:int;		public var aliensEjected:int;				//there are two modes of play, normal and hard		public var difficultyMode:String; //"Normal" "Hard"		//we store these modes in static properties so we can refer to them easily		static public var NORMAL:String = "Normal";		static public var HARD:String = "Hard";						// Kongregate API reference: used if we want to add the Kongregate stats api to our game		//public var kongregate:*				//This is the Document Class in our fla, and it will get constructed when we launch the swf		public function Game()		{			//set the static main property to this game object so we can always just use "Game.main" to refer to our game from other classes			main = this;			//hide some ui buttons			playNowButton.visible = false;			normalButton.visible = false;			hardButton.visible = false;			//fire up the keyboard input logic			Key.initialize(stage);						//add a loader to the game using these two event listeners			loaderInfo.addEventListener(ProgressEvent.PROGRESS,progressHandler);			loaderInfo.addEventListener(Event.COMPLETE,completeListener);						//if we want to use the Kongregate stats api, load it up.			//loadAPI();		}				//IF we are using the kong API		//This is required to implement the Kongregate stats api		/*		public function loadAPI()		{			// Pull the API path from the FlashVars			var paramObj:Object = LoaderInfo(root.loaderInfo).parameters;			// The API path. The debug version ("shadow" API) will load if testing locally. 			var api_url:String = paramObj.api_path || "http://www.kongregate.com/flash/API_AS3_Local.swf";			// Debug			//trace ( "API path: " + api_url );			// Load the API			var request:URLRequest = new URLRequest ( api_url );			var loader:Loader = new Loader();			loader.contentLoaderInfo.addEventListener ( Event.COMPLETE, apiLoadComplete );			loader.load ( request );			this.addChild ( loader );			}		*/				/**		* Called when the Kongregate API swf finishes loading		*/		/*		public function apiLoadComplete( event:Event ):void		{		    // Save Kongregate API reference		    kongregate = event.target.content;		    // Connect		    kongregate.services.connect();		}		*/				//used to track the progress of this loading swf		public function progressHandler(e:ProgressEvent):void		{			//update te loader bar as all the game sounds and bitmaps load			loaderBar.meter.scaleX = e.bytesLoaded / e.bytesTotal;		}				//when the game is done loading, hide the loading meter, and show the ui buttons		public function completeListener(e:Event):void		{			loaderBar.visible = false;			playNowButton.visible = true;			//fire onPlay event when the user clicks the play button			playNowButton.addEventListener(MouseEvent.CLICK, onPlay);					}				//on play, show the normal and hard mode buttons		public function onPlay(e:MouseEvent)		{			//hide the play button			playNowButton.visible = false;			playNowButton.removeEventListener(MouseEvent.CLICK, onPlay);			//show the difficulty mode buttons			normalButton.visible = true;			hardButton.visible = true;			//add listeners for when these buttons are pressed			normalButton.addEventListener(MouseEvent.CLICK, onNormal);			hardButton.addEventListener(MouseEvent.CLICK, onHard);					}				//if normal mode button is pressed		public function onNormal(e:MouseEvent)		{			//IF we are using the kong api			//set the Kongregate HighScore API mode to NORMAL			//kongregate.scores.setMode(NORMAL);						//set the mode in this class too			difficultyMode = NORMAL;			gotoAndStop(2);			//start game			initGame();		}				public function onHard(e:MouseEvent)		{			//IF we are using the kong api			//set the Kongregate HighScore API mode to HARD			//kongregate.scores.setMode(HARD);						//set the mode in this class too			difficultyMode = HARD;			gotoAndStop(2);			//start game			initGame();		}				//when a game is started		public function initGame()		{			//start the level manager that makes timers for power up intervals, enemy ship intervals, and miniboss intervals, etc...			LevelManager.init();			//resets all stats to zero for new game			initStats();			//make a new hero ship and position it in the middle of the stage						ship = new Ship(WIDTH/2, HEIGHT/2);			//display the new hero ship			spriteClip.addChild(ship);						//hide the game over menu and alien counter			gameOverMenu.visible = false;			alienCounter.visible = false;			alienCounter.aliensCaptured.text = 0;						}				//After game over, this event will fire when the play again NORMAL mode button is pressed		public function onPlayAgainNormal(e:MouseEvent)		{			//remove the button event listeners			gameOverMenu.normalButton.removeEventListener(MouseEvent.CLICK, onPlayAgainNormal);			gameOverMenu.hardButton.removeEventListener(MouseEvent.CLICK, onPlayAgainHard);			//set this game's mode			difficultyMode = NORMAL;						//If using the Kong api: set the Kongregate HighScores api mode			//kongregate.scores.setMode(NORMAL);						//start a new game			initGame();			//reset the background			bg.reset();			}				//After game over, this event will fire when the play again HARD mode button is pressed		public function onPlayAgainHard(e:MouseEvent)		{			//remove the button event listeners			gameOverMenu.hardButton.removeEventListener(MouseEvent.CLICK, onPlayAgainHard);			gameOverMenu.normalButton.removeEventListener(MouseEvent.CLICK, onPlayAgainNormal);			//set this game's mode			difficultyMode = HARD;						//If using the Kong api: set the Kongregate HighScores api mode			//kongregate.scores.setMode(HARD);						//start a new game			initGame();			//reset the background			bg.reset();			}				//this method resets the stats to zero for a new game		public function initStats()		{			scoreText.text = String(0);			kills = 0;			hits = 0;			points = 0;			misses = 0;			shots = 0;			aliensCaptured = 0;			aliensEjected = 0;			gameComplete = 0;			aliensCapturedInAir = 0;					}				//update game stats, this method is called from throughout the classes whenever a stat needs to be updated		public function updateStat(stat:String, val:int)		{			//the name of the game stat is passed in along with the value to increment it by			Game.main[stat] += val;			scoreText.text = String(points);						//update the Kongregate API stat if we are using the kongregate API						//IF we are using the kong api, submit stats			/*			switch(stat)			{				case "aliensCaptured":					Game.main.kongregate.stats.submit( "AliensCapturedLife" , Game.main.aliensCaptured);					Game.main.kongregate.stats.submit( "AliensCapturedMax" , Game.main.aliensCaptured);					break;				case "aliensCapturedInAir":					Game.main.kongregate.stats.submit( "AliensCapturedInAirMax" , Game.main.aliensCapturedInAir);				case "gameComplete":					kongregate.stats.submit( "GameComplete" , gameComplete);					break;				case "kills":					kongregate.stats.submit( "KillsMax" , kills);					break;				default:					break;			}			*/								}				//this mehtod id called when the game is over		public function gameOver()		{			//show the play again buttons			gameOverMenu.normalButton.addEventListener(MouseEvent.CLICK, onPlayAgainNormal);			gameOverMenu.hardButton.addEventListener(MouseEvent.CLICK, onPlayAgainHard);						var ac;			var h;						//stop the background			bg.disable();			//show the game over menu			gameOverMenu.visible = true;						//stop all the imers that level mamager started			LevelManager.main.stop();			//destroy all enemy ships			EnemyShip.killAll();			//destroy all aliens			Alien.killAll();						//tally points			gameOverMenu.points.text = points;						if(shots>0)			{				h = Math.floor((hits/shots) * 100);			}			else			{				h = 0;			}						if(aliensCaptured == 0)			{				ac = 0;			}			else			{				ac = aliensCaptured * 100;							}						//If using the Kongregate API, submit kills tally			//kongregate.stats.submit( "KillsLife" , kills);						//diplay point bounses			gameOverMenu.bonus.text = "hit%: " + h + "  x  kills: " + kills + "\n  +  aliens captured: " + aliensCaptured + " (x 100)";						points =  points + ((h * kills) + ac);			gameOverMenu.total.text = points;			scoreText.text = String(points);			//If using the Kongregate API, submit score			//kongregate.scores.submit( points, difficultyMode);			}	}	}